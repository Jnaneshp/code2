import { Component } from "react";
import './App.css'
const API_URL="https://jsonplaceholder.typicode.com/users";
class DataFatcher extends Component {
  constructor(props) {
    super(props);
    this.state = {
      data: [],
      loading: false,
      error: null,
      filteredData:[],
      searchQuery:''
    };
  }
  componentDidMount() {
    this.fetchData();
  }
  fetchData = async () => {
    this.setState({ loading: true ,error:null});
    try {
      const response = await fetch(API_URL);
      if(!response.ok){
        throw new Error('Failed to fetch data');
      }
      const data = await response.json();
      this.setState({ data, loading: false ,filteredData:data});

    } catch (error) {
      this.setState({ error:error.message, loading: false });
    }
  };

  componentDidUpdate(prevProps,prevState){
    if(prevState.searchQuery!==this.state.searchQuery){
      this.filterData();
    }

  }

  handleSearchChange=(event)=>{
    this.setState({searchQuery:event.target.value});

  };
  filterData=()=>{
    const {data,searchQuery}=this.state;
    if(searchQuery.trim()===''){
      this.setState({filteredData:data});
    }else{
      const filteredData=data.filter(item=>item.name.toLowerCase().includes(searchQuery.toLowerCase()));
      this.setState({filteredData});
    }
  }
  renderError=()=>{
    const {erorr} =this.state;
    return erorr?<div className="erorr">{`Error:${erorr}`}</div>:null
  };
  render(){
    const {filteredData,searchQuery,loading}=this.state;

    return(
      <div className="data-fetcher">
        <h1>User Data</h1>
        {this.renderError()}
        <div className="search-bar">
          <input
          type="text"
          value={searchQuery}
          onChange={this.handleSearchChange}
          placeholder="Search by name"
          />
        </div>
        {loading?(<div>Loading...</div>):(
          <table>
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>City</th>
              </tr>
            </thead>
            <tbody>
              {filteredData.length>0?(
                filteredData.map((item,index)=>(
                  <tr key={item.id}>
                    <td>{item.name}</td>
                    <td>{item.email}</td>
                    <td>{item.address.city}</td>
                  </tr>
                )
              )):(
                <tr>
                  <td colSpan='3'>No data found</td>
                </tr>
              )}
            </tbody>
          </table>
        )}
        <button onClick={this.fetchData}>Fetch Data</button>
      </div>
    );
  }
}

export default DataFatcher;
css::
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  background: #000;
  color: #fff;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Rotating Neon Box */
.neon-wrapper {
  position: relative;
  width: 90%;
  max-width: 900px;
  padding: 2rem;
  border-radius: 1rem;
  z-index: 1;
}

/* Rotating Background Glow */
.neon-wrapper::before {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  width: calc(100% + 20px);
  height: calc(100% + 20px);
  border-radius: 1rem;
  background-image: conic-gradient(from 0deg, blue, red, green, yellow, blue);
  animation: rotate 6s linear infinite;
  z-index: -2;
}

/* Blur Glow Layer */
.neon-wrapper::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  width: calc(100% + 20px);
  height: calc(100% + 20px);
  border-radius: 1rem;
  background-image: conic-gradient(from 0deg, blue, red, green, yellow, blue);
  filter: blur(30px);
  z-index: -3;
  animation: rotate 6s linear infinite;
}

@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Inner Fixed Box */
.data-fetcher {
  background: #111;
  padding: 2rem;
  border-radius: 1rem;
  box-shadow: 0 0 30px rgba(0, 255, 255, 0.1);
  position: relative;
  z-index: 1;
}

/* Text + Table Styles */
h1 {
  text-align: center;
  margin-bottom: 1rem;
}

.search-bar {
  text-align: center;
  margin-bottom: 20px;
}

.search-bar input {
  padding: 10px;
  width: 60%;
  font-size: 16px;
  border-radius: 8px;
  border: 2px solid #444;
  background: #000;
  color: #fff;
  outline: none;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background: #111;
  border-radius: 0.5rem;
  overflow: hidden;
}

th,
td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #333;
}

th {
  background-color: #333;
}

tr:hover {
  background-color: #222;
}

button {
  display: block;
  margin: 20px auto 0;
  padding: 10px 20px;
  font-weight: bold;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  background: linear-gradient(90deg, #ff416c, #ff4b2b);
  color: white;
  box-shadow: 0 0 10px rgba(255, 65, 108, 0.6);
  transition: all 0.3s ease;
}

button:hover {
  box-shadow: 0 0 20px rgba(255, 75, 43, 0.8);
}

.error {
  text-align: center;
  color: #ff4b2b;
  margin-bottom: 1rem;
}
